
% Name of the data, make sure you have the images or the appropriate data
% file before running the experiments. You can always use synthetic data
% generated by the code with 'synthetic_tt', or 'synthetic_tucker' options.
dataname = 'synthetic_tt';
% Set noise and missing data parameters for all data
% miss_levels = 0;%[.8:-.2:0];
% noise_levels = 0;%[.5:-.1:0];
% gross_levels = [0.05:.15:.5];
% % Set which algorithms to run.
% algs = {'ttrpca_g',  'ttrpca_ng'};
% 
% % Set Data parameters for synthetic data
% sz = 10*ones(1,4);
% r = [4]'*ones(1,3);
% 
% % Set parameter search grid. Warning: might require some tuning.
% lambda_list = 10.^[-.8:.2:0];%10.^[-2,-1];%[.8:-.2:0];
% alpha_list = 10.^[0];%[.5:-.1:0];
% theta_list = 10.^[-7:.5:-5];
% [X, Y, Z] = meshgrid([0.004:0.001:0.01],[0.2:.1:1],[.02:.01:.06]);
% beta_list = [X(:), Y(:), Z(:)];
% 
% n_ranks = size(r,1);
% n_gross = length(gross_levels);
% n_lambda = length(lambda_list);
% results = cell(n_lambda, n_ranks, n_gross);
% for i=1:n_lambda % Parallelized over lambda for faster parameter search. Switch with number of experiments for running with different initializations.
%     for i_r = 1:n_ranks
%         for i_m = 1:n_gross
%             results{i,i_r,i_m} = test_parameters(dataname, algs, alpha_list,...
%                 theta_list, lambda_list(i), beta_list, 'w_ket', false, 'rnd_seed', i,...
%                 'gross_noise', gross_levels(i_m),'miss_level', miss_levels(1),...
%                 'sizes', sz, 'ranks', r(i_r,:));
%         end
%     end
% end
% save(['param_',dataname,'_gross.mat'],'results')


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Older Experiments %%
%%% These codes are left as-is to give some idea on how to use the toolbox.

miss_levels = [.95:-.15:.05];
algs = {'ttrpca_g', 'ttrpca_ng'};
r = (1:9)'*ones(1,3);

for i =1:length(sz)-1
    delta(i) = min(prod(sz(1:i)),prod(sz(i+1:end)));
end
delta = delta/sum(delta);
for i=1:length(miss_levels)
    for j=1:size(r,1)
        data = load_data(dataname, 'miss_level', miss_levels(i),...
        'sizes',sz,'ranks', r(j,:));
    
%         L = horpca(data.Y, 'ind_miss', data.ind_miss,...
%                 'beta', bet_h, 'lambda', lam_h);
%         err(i,j,1) = get_SNR(L, data.Y0);
%         alpha = al_t.*delta;
%         L = ttrpca(data.Y, 'ind_miss', data.ind_miss,...
%                 'beta', [bet_t(1),bet_t(2)*alpha], 'lambda',...
%                 lam_t, 'alpha', alpha);
%         err(i,j,2) = get_SNR(L, data.Y0);
        alpha = al_tg.*delta;
        theta = the_tg.*delta;
        L = ttrpca_g(data.Y, 'ind_miss', data.ind_miss,...
                'beta', [bet_tg(1),bet_tg(2)*alpha,bet_tg(2)*alpha], 'lambda',...
                lam_tg, 'alpha', alpha, 'theta', theta);
        err(i,j,3) = get_SNR(L, data.Y0);
        alpha = al_tng.*delta;
        theta = the_tng.*ones(1,length(sz)-1);
        L = ttrpca_ng(data.Y, 'ind_miss', data.ind_miss,...
                'beta',[bet_tng(1),bet_tng(2)*alpha,bet_tng(2)*alpha], 'lambda',...
                lam_tng, 'alpha', alpha, 'theta', theta);
        err(i,j,4) = get_SNR(L, data.Y0);
    end
end
save('param_test_syn.mat','results')

%% Experiment design for COIL
% dataname = 'COIL';
% miss_levels = 0;%[.8:-.2:0];
% noise_levels = 0;%[.5:-.1:0];
% gross_levels = [0.2, 0.3, 0.4];
% algs = {'ttrpca','ttrpca_ng'};
% 
% sz = 10*ones(1,4);
% r = [4]'*ones(1,3);
%% Parameters for HoRPCA for COIL
% % lambda_list = 10.^[-1.6:.1:-.5];
% % alpha_list = 10.^[0];
% % theta_list = 10.^[-1.2:.1:-.4];
% % [X, Y, Z] = meshgrid([0.001:0.001:0.01],[.01:.01:.1],[.01:.01:.05]);
% % beta_list = [X(:), Y(:), Z(:)];
%% Parameters for TTRPCA for COIL
% lambda_list = 10.^[-2:.2:-.4];
% alpha_list = 10.^[0];
% theta_list = 10.^[-1.5:.2:-.1];
% [X, Y, Z] = meshgrid([0.004:0.001:0.01],[0.2:.1:1],[.02:.01:.06]);
% beta_list = [X(:), Y(:), Z(:)];
% 
% n_ranks = size(r,1);
% n_miss = length(gross_levels);
% n_exps = length(lambda_list);
% results = cell(n_exps, n_ranks, n_miss);
% parfor i=1:n_exps
%     for i_r = 1:n_ranks
%         for i_m = 1:n_miss
%             results{i,i_r,i_m} = test_parameters(dataname, algs, alpha_list,...
%                 theta_list, lambda_list(i), beta_list,'w_ket', true,'rnd_seed', i,...
%                 'gross_noise', gross_levels(i_m),'miss_level', miss_levels(1),...
%                 'sizes', sz, 'ranks', r(i_r,:));
%         end
%     end
% end
% save(['param_',dataname,'_gross_16_lin_theta.mat'],'results')